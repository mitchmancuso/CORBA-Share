package Common;


/**
* Common/ServerServantPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from FileServer.idl
* Saturday, August 24, 2019 10:21:54 o'clock PM EDT
*/

public abstract class ServerServantPOA extends org.omg.PortableServer.Servant
 implements Common.ServerServantOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("login", new java.lang.Integer (0));
    _methods.put ("registerUser", new java.lang.Integer (1));
    _methods.put ("deleteUser", new java.lang.Integer (2));
    _methods.put ("registerFiles", new java.lang.Integer (3));
    _methods.put ("clearSharedFiles", new java.lang.Integer (4));
    _methods.put ("clearNotSharedFiles", new java.lang.Integer (5));
    _methods.put ("getUserFromPort", new java.lang.Integer (6));
    _methods.put ("getConnectionPort", new java.lang.Integer (7));
    _methods.put ("getConnectionAddress", new java.lang.Integer (8));
    _methods.put ("setConnectionAddress", new java.lang.Integer (9));
    _methods.put ("viewAllSharedFiles", new java.lang.Integer (10));
    _methods.put ("startFileShare", new java.lang.Integer (11));
    _methods.put ("stopFileShare", new java.lang.Integer (12));
    _methods.put ("findFile", new java.lang.Integer (13));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // Common/ServerServant/login
       {
         String username = in.read_string ();
         String hashedPassword = in.read_string ();
         String $result = null;
         $result = this.login (username, hashedPassword);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 1:  // Common/ServerServant/registerUser
       {
         String username = in.read_string ();
         String hashedPassword = in.read_string ();
         String $result = null;
         $result = this.registerUser (username, hashedPassword);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 2:  // Common/ServerServant/deleteUser
       {
         String username = in.read_string ();
         String hashedPassword = in.read_string ();
         String $result = null;
         $result = this.deleteUser (username, hashedPassword);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 3:  // Common/ServerServant/registerFiles
       {
         String username = in.read_string ();
         this.registerFiles (username);
         out = $rh.createReply();
         break;
       }

       case 4:  // Common/ServerServant/clearSharedFiles
       {
         String username = in.read_string ();
         this.clearSharedFiles (username);
         out = $rh.createReply();
         break;
       }

       case 5:  // Common/ServerServant/clearNotSharedFiles
       {
         String username = in.read_string ();
         this.clearNotSharedFiles (username);
         out = $rh.createReply();
         break;
       }

       case 6:  // Common/ServerServant/getUserFromPort
       {
         int port = in.read_long ();
         String $result = null;
         $result = this.getUserFromPort (port);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 7:  // Common/ServerServant/getConnectionPort
       {
         String username = in.read_string ();
         int $result = (int)0;
         $result = this.getConnectionPort (username);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 8:  // Common/ServerServant/getConnectionAddress
       {
         String username = in.read_string ();
         String $result = null;
         $result = this.getConnectionAddress (username);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 9:  // Common/ServerServant/setConnectionAddress
       {
         String username = in.read_string ();
         String address = in.read_string ();
         this.setConnectionAddress (username, address);
         out = $rh.createReply();
         break;
       }

       case 10:  // Common/ServerServant/viewAllSharedFiles
       {
         String $result[] = null;
         $result = this.viewAllSharedFiles ();
         out = $rh.createReply();
         Common.StringsHelper.write (out, $result);
         break;
       }

       case 11:  // Common/ServerServant/startFileShare
       {
         String username = in.read_string ();
         String filename = in.read_string ();
         String $result = null;
         $result = this.startFileShare (username, filename);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 12:  // Common/ServerServant/stopFileShare
       {
         String username = in.read_string ();
         String filename = in.read_string ();
         String $result = null;
         $result = this.stopFileShare (username, filename);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 13:  // Common/ServerServant/findFile
       {
         String filename = in.read_string ();
         String $result[] = null;
         $result = this.findFile (filename);
         out = $rh.createReply();
         Common.StringsHelper.write (out, $result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:Common/ServerServant:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public ServerServant _this() 
  {
    return ServerServantHelper.narrow(
    super._this_object());
  }

  public ServerServant _this(org.omg.CORBA.ORB orb) 
  {
    return ServerServantHelper.narrow(
    super._this_object(orb));
  }


} // class ServerServantPOA
